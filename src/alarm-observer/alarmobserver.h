/*!
 * \file alarmobserver.h
 *
 * AlarmObserver class declaration
 *
 * \version 1.0
 *
 * \author Vladimir Poliakov
 * \author Brian Segers
 */

#ifndef OBSERVER_H
#define OBSERVER_H

#include <string>
#include <iostream>

/*!
 * \ingroup AlarmObservation
 *
 * \brief Observer class of observer structure
 *
 * Gives an opportunity to its successor to be notified any
 * observable object it is attached to
 */

class AlarmObserver
{
public:
    /*!
     * \brief Class constructor
     * \param name name of the observer
     */
    AlarmObserver(std::string name = "Uknown observer");
    ~AlarmObserver();

    /*!
     * \brief Handle the event generated by observable
     * \param msg message that was sent from an observable
     */
    void handle(const std::string msg);

private:
    /*!
     * \brief name of the observer
     */
    std::string name_;
};

#endif // OBSERVER_H
